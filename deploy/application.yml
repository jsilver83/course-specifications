- name: Deploy Course Specification
  hosts: application-servers
  become: yes
  become_user: root

  # common variables to all environments
  # for environment-specific variables, see:
  # environments/<env-name>/group_vars/all/vars.yml
  vars:
    vault_url: https://vault.itc.kfupm.edu.sa
    django_project_name: course-specifications
    django_project_admin_username: joud
    django_project_admin_email: joud@kfupm.edu.sa
    django_project_package_name: course_specifications
    buildbot_autobuild: false
    ssl_cert_path: "/etc/ssl/certs"
    django_project_env_vars:
      REQUESTS_CA_BUNDLE: "/etc/ssl/certs"

    apache_authn: cas
    apache_auth:
      - path: /
        authn_type: cas
        authz_type: none

    admins:
      - name: Abdullah Joud
        email: joud@kfupm.edu.sa
    uwsgi_processes: 2

  # tasks to be performed before role tasks, if any
  pre_tasks:

    - pause:
        prompt: Your Active Directory username
      when: not buildbot_autobuild
      register: ad_username
      connection: local

    - pause:
        prompt: Your Active Directory password
        echo: no
      when: not buildbot_autobuild
      register: ad_password
      connection: local

    - name: Vault authentication
      uri:
        url: "{{ vault_url }}/v1/auth/ldap/login/{{ ad_username.user_input }}"
        method: POST
        body: {"password": "{{ ad_password.user_input }}"}
        body_format: json
      connection: local
      become: no
      register: auth
      when: not buildbot_autobuild

    - name: set token
      set_fact:
        vault_access_token: "{{ auth.json.auth.client_token }}"
      when: not buildbot_autobuild

    - name: Retrieve secret key from Vault
      set_fact:
        secret_key: "{{ lookup('hashi_vault', 'secret=secret/{{ env }}/operations/apps/course-specifications/secret_key:value token={{ vault_access_token }} url={{ vault_url }} cacert={{ ssl_cert_path }}') }}"
      connection: local

    - name: Retrieve database password from vault
      set_fact:
        database_password: "{{ lookup('hashi_vault', 'secret=secret/{{ env }}/database/apps/course-specifications/database_password:value token={{ vault_access_token }} url={{ vault_url }} cacert={{ ssl_cert_path }}') }}"
      connection: local

    - name: Retrieve email password from vault
      set_fact:
        email_password: "{{ lookup('hashi_vault', 'secret=secret/{{ env }}/email/apps/course-specifications/email_password:value token={{ vault_access_token }} url={{ vault_url }} cacert={{ ssl_cert_path }}') }}"
      connection: local

    - name: Retrieve banner webservice password from vault
      set_fact:
        banner_webservice_password: "{{ lookup('hashi_vault', 'secret=secret/{{ env }}/operations/apps/course-specifications/banner_webservice_password:value token={{ vault_access_token }} url={{ vault_url }} cacert={{ ssl_cert_path }}') }}"
      connection: local

    - name: Retrieve ebs api password from vault
      set_fact:
        staff_webservice_password: "{{ lookup('hashi_vault', 'secret=secret/{{ env }}/operations/apps/course-specifications/staff_webservice_password:value token={{ vault_access_token }} url={{ vault_url }} cacert={{ ssl_cert_path }}') }}"
      connection: local

    - name: Retrieve adwar webservice password from vault
      set_fact:
        adwar_webservice_password: "{{ lookup('hashi_vault', 'secret=secret/{{ env }}/operations/apps/course-specifications/adwar_webservice_password:value token={{ vault_access_token }} url={{ vault_url }} cacert={{ ssl_cert_path }}') }}"
      connection: local

    - name: Retrieve camunda webservice password from vault
      set_fact:
        camunda_webservice_password: "{{ lookup('hashi_vault', 'secret=secret/{{ env }}/operations/apps/course-specifications/camunda_webservice_password:value token={{ vault_access_token }} url={{ vault_url }} cacert={{ ssl_cert_path }}') }}"
      connection: local

    - name: Retrieve sierra webservice password from vault
      set_fact:
        sierra_webservice_password: "{{ lookup('hashi_vault', 'secret=secret/{{ env }}/operations/apps/course-specifications/sierra_webservice_password:value token={{ vault_access_token }} url={{ vault_url }} cacert={{ ssl_cert_path }}') }}"
      connection: local

    - name: Generate local settings
      set_fact:
        django_project_local_settings: "{{ lookup('template', 'local_settings.py.j2') }}"


  roles:
    - django-project

  # tasks to be performed after role tasks, if any
  # post_tasks:
  #   - name: some task
  #     ...
